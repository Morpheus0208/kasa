#!/usr/bin/env bash

# Script de synchronisation quotidienne Git avec initialisation Trunk Based

# VÃ©rifier le remote
echo "ğŸ”¹ Remotes configurÃ©s :"
git remote -v
echo ""

# VÃ©rifier la branche active et le tracking
echo "ğŸ”¹ Branche active et tracking :"
git branch -vv
echo ""

# VÃ©rifier l'Ã©tat du dÃ©pÃ´t
echo "ğŸ”¹ Etat du dÃ©pÃ´t :"
git status
echo ""

# RÃ©cupÃ©rer les mises Ã  jour distantes
echo "ğŸ”¹ RÃ©cupÃ©ration des mises Ã  jour distantes..."
git fetch
git pull origin main
echo ""

# Proposer de crÃ©er une branche feature du jour
read -p "Voulez-vous crÃ©er une branche de feature du jour (Trunk Based) ? (o/n) : " create_branch

if [ "$create_branch" = "o" ]; then
  # Demander le nom de la feature
  read -p "Entrez le nom de la feature (ex: react-router) : " feature_name

  # Nom de la branche avec date et nom
  branch_name="feature/$(date +%Y-%m-%d)-$feature_name"
  git checkout -b "$branch_name"
  echo "âœ… Branche $branch_name crÃ©Ã©e et activÃ©e."
  echo ""
else
  echo "âœ… Pas de branche crÃ©Ã©e, vous restez sur la branche actuelle."
  echo ""
fi

# Ajout des modifications locales
echo "ğŸ”¹ Ajout des modifications locales..."
git add .

# Demande Ã  l'utilisateur s'il souhaite committer
read -p "Voulez-vous committer les changements ajoutÃ©s ? (o/n) : " do_commit

if [ "$do_commit" = "o" ]; then
  # Demande le message de commit
  read -p "Entrez le message du commit : " commit_msg
  git commit -m "$commit_msg"
  echo ""
else
  echo "âœ… Aucun commit effectuÃ©."
  echo ""
fi

# Pousser les changements
current_branch=$(git rev-parse --abbrev-ref HEAD)
echo "ğŸ”¹ Pousser sur le dÃ©pÃ´t distant..."
git push -u origin "$current_branch"
echo ""

echo "âœ… Synchronisation et workflow Trunk Based terminÃ©s."
